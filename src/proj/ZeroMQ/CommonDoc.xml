<?xml version="1.0" encoding="utf-8" ?>
<ZeroMQ>
  <Members name="Bind">
    <summary>
    Create an endpoint for accepting connections and bind it to the current socket.
    </summary>
    <param name="endpoint">
    A string consisting of a <em>transport</em> and an <em>address</em>, formatted as <c><em>transport</em>://<em>address</em></c>.
    </param>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="Connect">
    <summary>
    Connect the current socket to the specified endpoint.
    </summary>
    <param name="endpoint">
    A string consisting of a <em>transport</em> and an <em>address</em>, formatted as <c><em>transport</em>://<em>address</em></c>.
    </param>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="Receive1">
    <summary>
    Receive a message (or message-part) from a remote socket in blocking mode.
    </summary>
    <returns>A <see cref="ReceivedMessage"/> object containing the data recieved and the operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="Receive2">
    <summary>
    Receive a message (or message-part) from a remote socket in non-blocking mode.
    If the specified timeout elapses, <see cref="ReceiveResult.TryAgain"/> is set in <see cref="ReceivedMessage.Result"/>,
    indicating that the receive operation should be attempted again.
    </summary>
    <param name="timeout">A <see cref="TimeSpan"/> indicating the timeout value.</param>
    <returns>A <see cref="ReceivedMessage"/> object containing the data recieved and the operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="Send1">
    <summary>
    Queue a single-part message (or the final message-part) to be sent by the socket in blocking mode.
    </summary>
    <param name="buffer">An array of type <see cref="byte"/> that contains the message to be sent.</param>
    <returns>A <see cref="SendResult"/> value indicating the send operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="Send2">
    <summary>
    Queue a single-part message (or the final message-part) to be sent by the socket in non-blocking mode.
    If the specified timeout elapses, <see cref="SendResult.TryAgain"/> is returned, indicating that the
    send operation should be attempted again.
    </summary>
    <param name="buffer">An array of type <see cref="byte"/> that contains the message to be sent.</param>
    <param name="timeout">A <see cref="TimeSpan"/> indicating the timeout value.</param>
    <returns>A <see cref="SendResult"/> value indicating the send operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="SendPart1">
    <summary>
    Queue part of a multi-part message to be sent by the socket in blocking mode. More message parts will follow.
    </summary>
    <param name="buffer">An array of type <see cref="byte"/> that contains the message to be sent.</param>
    <returns>A <see cref="SendResult"/> value indicating the send operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="SendPart2">
    <summary>
    Queue part of a multi-part message to be sent by the socket in non-blocking mode. More message parts will follow.
    If the specified timeout elapses, <see cref="SendResult.TryAgain"/> is returned, indicating that the
    send operation should be attempted again.
    </summary>
    <param name="buffer">An array of type <see cref="byte"/> that contains the message to be sent.</param>
    <param name="timeout">A <see cref="TimeSpan"/> indicating the timeout value.</param>
    <returns>A <see cref="SendResult"/> value indicating the send operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>

  <Members name="Subscribe">
    <summary>
    Sets a new message filter for the current socket.
    </summary>
    <param name="prefix">Prefix for subscribed messages.</param>
  </Members>

  <Members name="SubscribeAll">
    <summary>
    Subscribe to all incoming messages.
    </summary>
  </Members>

  <Members name="Unsubscribe">
    <summary>
    Remove an existing filter on the current socket.
    </summary>
    <param name="prefix">An existing prefix previously established via Subscribe.</param>
  </Members>
  
  <Members name="UnsubscribeAll">
    <summary>
    Remove subscription filter for all incoming messages. Other filters may remain.
    </summary>
  </Members>

  <Members name="ReceiveReady">
    <summary>
    Occurs when at least one message may be received from the socket without blocking.
    </summary>
  </Members>

  <Members name="SendReady">
    <summary>
    Occurs when at least one message may be sent via the socket without blocking.
    </summary>
  </Members>
  
  <Members name="Poll1">
    <summary>
    Multiplex input/output events over the contained set of sockets in blocking mode, firing
    <see cref="IReceiveSocket.ReceiveReady" /> or <see cref="ISendSocket.SendReady" /> as appropriate.
    </summary>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="Poll2">
    <summary>
    Multiplex input/output events over the contained set of sockets in non-blocking mode, firing
    <see cref="IReceiveSocket.ReceiveReady" /> or <see cref="ISendSocket.SendReady" /> as appropriate.
    Returns when one or more events are ready to fire or when the specified timeout elapses, whichever
    comes first.
    </summary>
    <param name="timeout">A <see cref="TimeSpan"/> indicating the timeout value.</param>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>


  <Members name="Affinity">
    <summary>
    Gets or sets the I/O thread affinity for newly created connections on this socket.
    </summary>
  </Members>

  <Members name="Backlog">
    <summary>
    Gets or sets the maximum length of the queue of outstanding peer connections. (Default = 100 connections).
    </summary>
  </Members>

  <Members name="Identity">
    <summary>
    Gets or sets the identity of the current socket.
    </summary>
  </Members>

  <Members name="Linger">
    <summary>
    Gets or sets the linger period for socket shutdown. (Default = <see cref="TimeSpan.MaxValue"/>, infinite).
    </summary>
  </Members>

  <Members name="MaxMessageSize">
    <summary>
    Gets or sets the maximum size for inbound messages (bytes). (Default = -1, no limit).
    </summary>
  </Members>

  <Members name="MulticastHops">
    <summary>
    Gets or sets the time-to-live field in every multicast packet sent from this socket (network hops). (Default = 1 hop).
    </summary>
  </Members>

  <Members name="MulticastRate">
    <summary>
    Gets or sets the maximum send or receive data rate for multicast transports (kbps). (Default = 100 kbps).
    </summary>
  </Members>

  <Members name="MulticastRecoveryInterval">
    <summary>
    Gets or sets the recovery interval for multicast transports. (Default = 10 seconds).
    </summary>
  </Members>

  <Members name="ReceiveBufferSize">
    <summary>
    Gets or sets the underlying kernel receive buffer size for the current socket (bytes). (Default = 0, OS default).
    </summary>
  </Members>

  <Members name="ReceiveHighWatermark">
    <summary>
    Gets or sets the high water mark for inbound messages (number of messages). (Default = 0, no limit).
    </summary>
  </Members>

  <Members name="ReceiveMore">
    <summary>
    Gets a value indicating whether the multi-part message currently being read has more message parts to follow.
    </summary>
  </Members>

  <Members name="ReceiveTimeout">
    <summary>
    Gets or sets the timeout for receive operations. (Default = <see cref="TimeSpan.MaxValue"/>, infinite).
    </summary>
  </Members>

  <Members name="ReconnectInterval">
    <summary>
    Gets or sets the initial reconnection interval. (Default = 100 milliseconds).
    </summary>
  </Members>

  <Members name="ReconnectIntervalMax">
    <summary>
    Gets or sets the maximum reconnection interval. (Default = 0, only use <see cref="ReconnectInterval"/>).
    </summary>
  </Members>

  <Members name="SendBufferSize">
    <summary>
    Gets or sets the underlying kernel transmit buffer size for the current socket (bytes). (Default = 0, OS default).
    </summary>
  </Members>

  <Members name="SendHighWatermark">
    <summary>
    Gets or sets the high water mark for outbound messages (number of messages). (Default = 0, no limit).
    </summary>
  </Members>

  <Members name="SendTimeout">
    <summary>
    Gets or sets the timeout for send operations. (Default = <see cref="TimeSpan.MaxValue"/>, infinite).
    </summary>
  </Members>
</ZeroMQ>