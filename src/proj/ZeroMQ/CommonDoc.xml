<?xml version="1.0" encoding="utf-8" ?>
<ZeroMQ>
  <Members name="Receive1">
    <summary>
    Receive a message (or message-part) from a remote socket in blocking mode.
    </summary>
    <returns>A <see cref="ReceivedMessage"/> object containing the data recieved and the operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="Receive2">
    <summary>
    Receive a message (or message-part) from a remote socket in non-blocking mode.
    If the specified timeout elapses, <see cref="ReceiveResult.TryAgain"/> is set in <see cref="ReceivedMessage.Result"/>,
    indicating that the receive operation should be attempted again.
    </summary>
    <param name="timeout">A <see cref="TimeSpan"/> indicating the timeout value.</param>
    <returns>A <see cref="ReceivedMessage"/> object containing the data recieved and the operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="Send1">
    <summary>
    Queue a single-part message (or the final message-part) to be sent by the socket in blocking mode.
    </summary>
    <param name="buffer">An array of type <see cref="byte"/> that contains the message to be sent.</param>
    <returns>A <see cref="SendResult"/> value indicating the send operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="Send2">
    <summary>
    Queue a single-part message (or the final message-part) to be sent by the socket in non-blocking mode.
    If the specified timeout elapses, <see cref="SendResult.TryAgain"/> is returned, indicating that the
    send operation should be attempted again.
    </summary>
    <param name="buffer">An array of type <see cref="byte"/> that contains the message to be sent.</param>
    <param name="timeout">A <see cref="TimeSpan"/> indicating the timeout value.</param>
    <returns>A <see cref="SendResult"/> value indicating the send operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="SendPart1">
    <summary>
    Queue part of a multi-part message to be sent by the socket in blocking mode. More message parts will follow.
    </summary>
    <param name="buffer">An array of type <see cref="byte"/> that contains the message to be sent.</param>
    <returns>A <see cref="SendResult"/> value indicating the send operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>
  
  <Members name="SendPart2">
    <summary>
    Queue part of a multi-part message to be sent by the socket in non-blocking mode. More message parts will follow.
    If the specified timeout elapses, <see cref="SendResult.TryAgain"/> is returned, indicating that the
    send operation should be attempted again.
    </summary>
    <param name="buffer">An array of type <see cref="byte"/> that contains the message to be sent.</param>
    <param name="timeout">A <see cref="TimeSpan"/> indicating the timeout value.</param>
    <returns>A <see cref="SendResult"/> value indicating the send operation outcome.</returns>
    <exception cref="ZmqLibException">An error occured during the execution of a native procedure.</exception>
  </Members>

  <Members name="Subscribe">
    <summary>
    Sets a new message filter for the current socket.
    </summary>
    <param name="prefix">Prefix for subscribed messages.</param>
  </Members>

  <Members name="SubscribeAll">
    <summary>
    Subscribe to all incoming messages.
    </summary>
  </Members>

  <Members name="Unsubscribe">
    <summary>
    Remove an existing filter on the current socket.
    </summary>
    <param name="prefix">An existing prefix previously established via Subscribe.</param>
  </Members>
  
  <Members name="UnsubscribeAll">
    <summary>
    Remove subscription filter for all incoming messages. Other filters may remain.
    </summary>
  </Members>

  <Members name="ReceiveReady">
    <summary>
    Occurs when at least one message may be received from the socket without blocking.
    </summary>
  </Members>

  <Members name="SendReady">
    <summary>
    Occurs when at least one message may be sent via the socket without blocking.
    </summary>
  </Members>
</ZeroMQ>